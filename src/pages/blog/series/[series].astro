---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getPostsInSeries, getAllSeries } from '../../../utils/series.js';

export async function getStaticPaths() {
  const series = await getAllSeries();
  return series.map(seriesName => ({
    params: { series: seriesName },
    props: { seriesName }
  }));
}

const { seriesName } = Astro.props;
const seriesPosts = await getPostsInSeries(seriesName);
const allSeries = await getAllSeries();
---

<Layout title={`${seriesName} - Blog Series`}>
  <div class="min-h-screen bg-background text-foreground">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Back to blog button -->
        <div class="mb-8">
          <a href="/blog" class="inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Blog
          </a>
        </div>

        <!-- Series header -->
        <header class="mb-12">
          <div class="flex items-center gap-3 mb-4">
            <span class="text-sm bg-primary/20 text-primary px-3 py-1 rounded-full">
              Series
            </span>
            <h1 class="text-4xl font-bold">{seriesName}</h1>
          </div>
          <p class="text-lg text-muted">
            {seriesPosts.length} {seriesPosts.length === 1 ? 'post' : 'posts'} in this series
          </p>
        </header>

        <!-- Series navigation -->
        <div class="mb-8">
          <div class="flex flex-wrap gap-2">
            {seriesPosts.map((post, index) => (
              <a 
                href={`/blog/${post.slug}`}
                class="px-4 py-2 text-sm rounded-lg border transition-colors hover:border-primary"
              >
                Part {index + 1}: {post.data.title}
              </a>
            ))}
          </div>
        </div>

        <!-- Series posts -->
        <div class="grid gap-8">
          {seriesPosts.map((post, index) => (
            <article class="glass rounded-lg p-6 border border-border hover:border-primary transition-colors">
              <div class="flex items-start justify-between gap-4 mb-4">
                <div class="flex items-center gap-3">
                  <span class="text-sm bg-primary/20 text-primary px-2 py-1 rounded-full">
                    Part {index + 1}
                  </span>
                  <h2 class="text-xl font-bold">
                    <a href={`/blog/${post.slug}`} class="text-foreground hover:text-primary transition-colors">
                      {post.data.title}
                    </a>
                  </h2>
                </div>
                {post.data.featured && (
                  <span class="px-2 py-1 text-xs bg-primary/20 text-primary rounded-full">
                    featured
                  </span>
                )}
              </div>
              
              {post.data.subtitle && (
                <p class="text-muted mb-3 italic">{post.data.subtitle}</p>
              )}
              
              <div class="flex items-center gap-4 text-sm text-muted mb-4">
                <span>{post.data.date.toLocaleDateString()}</span>
                <span>•</span>
                <span>{post.data.readTime || '5 min read'}</span>
                <span>•</span>
                <span>by {post.data.author}</span>
              </div>
              
              <p class="text-muted mb-4">{post.data.excerpt}</p>
              
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-4">
                  {post.data.tags.slice(0, 3).map((tag: string) => (
                    <span class="px-2 py-1 text-xs bg-secondary border border-border rounded-full">
                      {tag}
                    </span>
                  ))}
                  {post.data.tags.length > 3 && (
                    <span class="text-xs px-2 py-1 text-muted">
                      +{post.data.tags.length - 3} more
                    </span>
                  )}
                </div>
              )}
              
              <a href={`/blog/${post.slug}`} class="text-primary hover:text-primary/80 transition-colors text-sm font-medium">
                Read Part {index + 1} →
              </a>
            </article>
          ))}
        </div>

        <!-- Other series -->
        {allSeries.length > 1 && (
          <section class="mt-16 pt-8 border-t border-border">
            <h2 class="text-2xl font-semibold mb-6">Other Series</h2>
            <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {allSeries
                .filter(series => series !== seriesName)
                .map(series => (
                  <a 
                    href={`/blog/series/${encodeURIComponent(series)}`}
                    class="glass rounded-lg p-4 border border-border hover:border-primary transition-colors"
                  >
                    <h3 class="font-semibold text-foreground mb-2">{series}</h3>
                    <span class="text-primary text-sm">View Series →</span>
                  </a>
                ))}
            </div>
          </section>
        )}
      </div>
    </div>
  </div>
</Layout>
